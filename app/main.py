from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import os
from app.db.base import Base
from app.db.session import engine

from app.api.v1.routers import producao_router
from app.api.v1.routers import processamento_router
from app.api.v1.routers import comercializacao_router
from app.api.v1.routers import importacao_router
from app.api.v1.routers import exportacao_router
from app.api.v1.routers import auth_router

PROJECT_ROOT_IN_CONTAINER = "/app"
TEMPLATES_DIR = os.path.join(PROJECT_ROOT_IN_CONTAINER, "templates")
STATIC_DIR = os.path.join(PROJECT_ROOT_IN_CONTAINER, "static")

def create_db_and_tables():
    print("MAIN.PY: Verificando e criando tabelas do banco de dados (se n칚o existirem)...")
    Base.metadata.create_all(bind=engine)
    print("MAIN.PY: Tabelas do banco de dados prontas.")

@asynccontextmanager
async def lifespan(app_instance: FastAPI): 
    print("MAIN.PY: Evento de inicializa칞칚o (lifespan) - In칤cio.")


    print(f"MAIN.PY DEBUG: Caminho esperado para TEMPLATES_DIR: {TEMPLATES_DIR}")
    if not os.path.isdir(TEMPLATES_DIR):
        print(f"MAIN.PY ERROR CR칈TICO: Diret칩rio de templates N츾O ENCONTRADO em: {TEMPLATES_DIR}")
    else:
        print(f"MAIN.PY INFO: Diret칩rio de templates ENCONTRADO em: {TEMPLATES_DIR}")

    print(f"MAIN.PY DEBUG: Caminho esperado para STATIC_DIR: {STATIC_DIR}")
    if not os.path.isdir(STATIC_DIR):
        print(f"MAIN.PY ERROR CR칈TICO: Diret칩rio de est치ticos N츾O ENCONTRADO em: {STATIC_DIR}")
    else:
        print(f"MAIN.PY INFO: Diret칩rio de est치ticos ENCONTRADO em: {STATIC_DIR}")

    create_db_and_tables() # Cria as tabelas do banco de dados
    yield
    print("MAIN.PY: Evento de finaliza칞칚o (lifespan) - Fim.")


description = """
API para consulta de dados de Vitivinicultura da Embrapa. 游꼖

**Funcionalidades:**

  * Consulta de dados de Produ칞칚o, Processamento, Comercializa칞칚o, Importa칞칚o e Exporta칞칚o.
  * Registro de usu치rios e autentica칞칚o via token JWT.
  * P치gina inicial interativa.

Acesse a documenta칞칚o completa em `/docs` ou `/redoc`.
Para obter um token, registre-se em `/api/v1/auth/register` e fa칞a login em `/api/v1/auth/token`.
"""
app = FastAPI(
    title="Vitibrasil Embrapa API",
    description=description,
    version="0.1.0",
    contact={
        "name": "Guilherme H. Jeronimo",
        "url": "https://github.com/GuilhermeHJeronimo/TechChallenger",
    },
    openapi_tags=[
        {"name": "P치gina Inicial", "description": "P치gina de boas-vindas da API."},
        {"name": "Autentica칞칚o", "description": "Opera칞칫es de autentica칞칚o e registro."},
        {"name": "Produ칞칚o", "description": "Dados de produ칞칚o vitivin칤cola."},
        {"name": "Processamento", "description": "Dados de processamento de uvas."},
        {"name": "Comercializa칞칚o", "description": "Dados de comercializa칞칚o."},
        {"name": "Importa칞칚o", "description": "Dados de importa칞칚o de produtos vitivin칤colas."},
        {"name": "Exporta칞칚o", "description": "Dados de exporta칞칚o de produtos vitivin칤colas."},
        {"name": "Sa칰de", "description": "Verifica칞칚o de status da API."}
    ],
    lifespan=lifespan
)

if os.path.isdir(STATIC_DIR):
    app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")
    print(f"MAIN.PY INFO: Arquivos est치ticos montados de '{STATIC_DIR}' em '/static'.")
else:
    print(f"MAIN.PY ALERTA: Diret칩rio est치tico '{STATIC_DIR}' n칚o existe. Arquivos est치ticos n칚o ser칚o servidos. Verifique seu Dockerfile e a estrutura do projeto.")

templates = None
if os.path.isdir(TEMPLATES_DIR):
    templates = Jinja2Templates(directory=TEMPLATES_DIR)
    print(f"MAIN.PY INFO: Templates Jinja2 configurados para o diret칩rio '{TEMPLATES_DIR}'.")
else:
    print(f"MAIN.PY ALERTA: Diret칩rio de templates '{TEMPLATES_DIR}' n칚o existe. A p치gina inicial n칚o ser치 servida corretamente.")


origins = [
    "http://localhost",
    "http://localhost:8000",
    "http://127.0.0.1",
    "http://127.0.0.1:8000",
    "https://techchallenger.onrender.com",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/", response_class=HTMLResponse, tags=["P치gina Inicial"], include_in_schema=False)
async def read_root(request: Request):
    if templates:
        return templates.TemplateResponse("index.html", {"request": request})
    else:
        return HTMLResponse("<html><body><h1>Erro: P치gina inicial n칚o p칪de ser carregada (diret칩rio de templates ausente).</h1></body></html>", status_code=500)

# --- Incluir os Routers da API ---

API_PREFIX = "/api/v1"
app.include_router(auth_router.router, prefix=f"{API_PREFIX}/auth", tags=["Autentica칞칚o"])
app.include_router(producao_router.router, prefix=f"{API_PREFIX}/producao", tags=["Produ칞칚o"])
app.include_router(processamento_router.router, prefix=f"{API_PREFIX}/processamento", tags=["Processamento"])
app.include_router(comercializacao_router.router, prefix=f"{API_PREFIX}/comercializacao", tags=["Comercializa칞칚o"])
app.include_router(importacao_router.router, prefix=f"{API_PREFIX}/importacao", tags=["Importa칞칚o"])
app.include_router(exportacao_router.router, prefix=f"{API_PREFIX}/exportacao", tags=["Exporta칞칚o"])

@app.get("/health", tags=["Sa칰de"], include_in_schema=True)
async def health_check():
    return {"status": "API online e operacional!"}